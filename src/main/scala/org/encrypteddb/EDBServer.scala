package org.encrypteddb

import java.util

import com.typesafe.scalalogging.StrictLogging
import org.crypto.sse._
import org.encrypteddb.utils.FileUtils

import scala.collection.JavaConverters._

/**
  * * A EDB server, that holds secret key `sk` and generates update and search tokens
  */
class EDBServer(edb: util.HashMap[String, Array[Byte]]) extends FileUtils with StrictLogging {


  def update(updateToken: ModificationToken): Unit = updateToken match {
    case insertToken: InsertToken => insert(insertToken)
    case deleteToken: DeleteToken => delete(deleteToken)
  }

  private def delete(token: DeleteToken): Unit = {
    val indices: util.List[Integer] = token.deletions.map(Integer.valueOf).asJava
    DynRH.delete(token.key1, indices, edb)
  }


  /**
    * Update EDB using the provided update token
    *
    * @param token - update token generated by the client
    * @return Success on correct update, Failure otherwise
    */
  private def insert(token: InsertToken): Unit = {
    DynRH.update(edb, token.token)
    logger.info(s"Server database updated with ${token.token.keySet().size()} pairs")
  }

  /**
    * Find all documents using the provided search token
    *
    * @param token - search token, generated by the client
    * @return list of document ids
    */
  def search(token: SearchToken): List[String] = {
    DynRH.resolve(token.key2, DynRH.queryFS(token.token, edb)).asScala.toList
  }

}

object EDBServer {
  def create(): EDBServer = new EDBServer(DynRH.setup())
}
